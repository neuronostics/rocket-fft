from typing import Union

from numpy import complex64, complex128, float32, float64, int64
from numpy.typing import NDArray

complex_array = Union[NDArray[complex64], NDArray[complex128]]
real_array = Union[NDArray[float32], NDArray[float64]]

def c2c(ain: complex_array, aout: complex_array, axes: NDArray[int64], forward: bool, fct: float64, nthreads: int64) -> None: ...
def r2c(ain: real_array, aout: complex_array, axes: NDArray[int64], forward: bool, fct: float64, nthreads: int64) -> None: ...
def c2r(ain: complex_array, aout: real_array, axes: NDArray[int64], forward: bool, fct: float64, nthreads: int64) -> None: ...
def c2c_sym(ain: real_array, aout: complex_array, axes: NDArray[int64], forward: bool, fct: float64, nthreads: int64) -> None: ...
def dst(ain: real_array, aout: real_array, axes: NDArray[int64], type: int64, fct: float64, ortho: bool, nthreads: int64) -> None: ...
def dct(ain: real_array, aout: real_array, axes: NDArray[int64], type: int64, fct: float64, ortho: bool, nthreads: int64) -> None: ...
def separable_hartley(ain: real_array, aout: real_array, axes: NDArray[int64], fct: float64, nthreads: int64) -> None: ...
def genuine_hartley(ain: real_array, aout: real_array, axes: NDArray[int64], fct: float64, nthreads: int64) -> None: ...
def fftpack(ain: real_array, aout: real_array, axes: NDArray[int64], real2hermitian: bool, forward: bool, fct: float64, nthreads: int64) -> None: ...
def good_size(target: int64, real: bool) -> int64: ...

def scipy_like() -> None: ...
def numpy_like() -> None: ...